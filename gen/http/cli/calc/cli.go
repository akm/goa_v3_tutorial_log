// Code generated by goa v3.0.3, DO NOT EDIT.
//
// calc HTTP client CLI support package
//
// Command:
// $ goa gen calcsvc/design

package cli

import (
	accountc "calcsvc/gen/http/account/client"
	calcc "calcsvc/gen/http/calc/client"
	"flag"
	"fmt"
	"net/http"
	"os"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `calc (add|multiply|devide)
account signin
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` calc add --a 6642806206162570878 --b 8723986392256123438` + "\n" +
		os.Args[0] + ` account signin --username "user" --password "password"` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		calcFlags = flag.NewFlagSet("calc", flag.ContinueOnError)

		calcAddFlags = flag.NewFlagSet("add", flag.ExitOnError)
		calcAddAFlag = calcAddFlags.String("a", "REQUIRED", "Left operand")
		calcAddBFlag = calcAddFlags.String("b", "REQUIRED", "Right operand")

		calcMultiplyFlags     = flag.NewFlagSet("multiply", flag.ExitOnError)
		calcMultiplyAFlag     = calcMultiplyFlags.String("a", "REQUIRED", "Left operand")
		calcMultiplyBFlag     = calcMultiplyFlags.String("b", "REQUIRED", "Right operand")
		calcMultiplyTokenFlag = calcMultiplyFlags.String("token", "REQUIRED", "")

		calcDevideFlags     = flag.NewFlagSet("devide", flag.ExitOnError)
		calcDevideAFlag     = calcDevideFlags.String("a", "REQUIRED", "Left operand")
		calcDevideBFlag     = calcDevideFlags.String("b", "REQUIRED", "Right operand")
		calcDevideTokenFlag = calcDevideFlags.String("token", "REQUIRED", "")

		accountFlags = flag.NewFlagSet("account", flag.ContinueOnError)

		accountSigninFlags        = flag.NewFlagSet("signin", flag.ExitOnError)
		accountSigninUsernameFlag = accountSigninFlags.String("username", "REQUIRED", "Username used to perform signin")
		accountSigninPasswordFlag = accountSigninFlags.String("password", "REQUIRED", "Password used to perform signin")
	)
	calcFlags.Usage = calcUsage
	calcAddFlags.Usage = calcAddUsage
	calcMultiplyFlags.Usage = calcMultiplyUsage
	calcDevideFlags.Usage = calcDevideUsage

	accountFlags.Usage = accountUsage
	accountSigninFlags.Usage = accountSigninUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "calc":
			svcf = calcFlags
		case "account":
			svcf = accountFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "calc":
			switch epn {
			case "add":
				epf = calcAddFlags

			case "multiply":
				epf = calcMultiplyFlags

			case "devide":
				epf = calcDevideFlags

			}

		case "account":
			switch epn {
			case "signin":
				epf = accountSigninFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "calc":
			c := calcc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "add":
				endpoint = c.Add()
				data, err = calcc.BuildAddPayload(*calcAddAFlag, *calcAddBFlag)
			case "multiply":
				endpoint = c.Multiply()
				data, err = calcc.BuildMultiplyPayload(*calcMultiplyAFlag, *calcMultiplyBFlag, *calcMultiplyTokenFlag)
			case "devide":
				endpoint = c.Devide()
				data, err = calcc.BuildDevidePayload(*calcDevideAFlag, *calcDevideBFlag, *calcDevideTokenFlag)
			}
		case "account":
			c := accountc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "signin":
				endpoint = c.Signin()
				data, err = accountc.BuildSigninPayload(*accountSigninUsernameFlag, *accountSigninPasswordFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// calcUsage displays the usage of the calc command and its subcommands.
func calcUsage() {
	fmt.Fprintf(os.Stderr, `The calc service performs operations on numbers
Usage:
    %s [globalflags] calc COMMAND [flags]

COMMAND:
    add: Add implements add.
    multiply: Multiply implements multiply.
    devide: Devide implements devide.

Additional help:
    %s calc COMMAND --help
`, os.Args[0], os.Args[0])
}
func calcAddUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] calc add -a INT -b INT

Add implements add.
    -a INT: Left operand
    -b INT: Right operand

Example:
    `+os.Args[0]+` calc add --a 6642806206162570878 --b 8723986392256123438
`, os.Args[0])
}

func calcMultiplyUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] calc multiply -a INT -b INT -token STRING

Multiply implements multiply.
    -a INT: Left operand
    -b INT: Right operand
    -token STRING: 

Example:
    `+os.Args[0]+` calc multiply --a 3448989877641388488 --b 2788110747497692605 --token "Et eum aut adipisci temporibus."
`, os.Args[0])
}

func calcDevideUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] calc devide -a INT -b INT -token STRING

Devide implements devide.
    -a INT: Left operand
    -b INT: Right operand
    -token STRING: 

Example:
    `+os.Args[0]+` calc devide --a 8272531006444625870 --b 8983579422360671298 --token "Eaque consectetur excepturi eaque."
`, os.Args[0])
}

// accountUsage displays the usage of the account command and its subcommands.
func accountUsage() {
	fmt.Fprintf(os.Stderr, `Create and delete account
Usage:
    %s [globalflags] account COMMAND [flags]

COMMAND:
    signin: Creates a valid JWT

Additional help:
    %s account COMMAND --help
`, os.Args[0], os.Args[0])
}
func accountSigninUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] account signin -username STRING -password STRING

Creates a valid JWT
    -username STRING: Username used to perform signin
    -password STRING: Password used to perform signin

Example:
    `+os.Args[0]+` account signin --username "user" --password "password"
`, os.Args[0])
}
